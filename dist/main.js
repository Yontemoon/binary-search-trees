(()=>{var t={147:t=>{t.exports=(t=null,e=null,r=null)=>({value:t,left:e,right:r})}},e={};function r(i){var l=e[i];if(void 0!==l)return l.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,r),n.exports}(()=>{const t=r(147),e=new class{constructor(t){const e=Array.from(new Set(t)).sort(((t,e)=>t-e));this.root=this.buildTree(e)}buildTree(e){if(0===e.length)return null;var r=Math.floor(e.length/2),i=t(e[r]);return i.left=this.buildTree(e.slice(0,r)),i.right=this.buildTree(e.slice(r+1)),i}insert(e,r=this.root){return null===r?t(e):r.value!==e?(e<r.value?r.left=this.insert(e,r.left):r.right=this.insert(e,r.right),r):void 0}delete(t,e=this.root){return null===e||(e.value===t?e=this.#t(e):e.value>t?e.left=this.delete(t,e.left):e.value<t&&(e.right=this.delete(t,e.right))),e}#t(t){if(t.left&&t.right){const e=this.#e(t.right);return t.value=e.value,t.right=this.delete(e.value,t.right),t}{const e=t.right||t.left;return t=null,e}}#e(t){let e=t;for(;e.left;)e=e.left;return e}find(t,e=this.root){return null===e?null:e.value>t?this.find(t,e.left):e.value<t?this.find(t,e.right):e}levelOrder(t){let e=this.root;const r=[e],i=[];for(;r.length>0;){e=r.shift(),t?t(e):i.push(e.value);const l=[e?.left,e?.right].filter((t=>t));r.push(...l)}return i}inorder(t,e=this.root,r=[]){if(null!==e)return this.inorder(t,e.left,r),t?t(e):r.push(e.value),this.inorder(t,e.right,r),r}postorder(t,e=this.root,r=[]){if(null!==e)return this.inorder(t,e.right,r),t?t(e):r.push(e.value),this.inorder(t,e.left,r),console.log(r),r}preorder(t,e=this.root,r=[]){if(null!==e)return t?t(e):r.push(e.value),this.preorder(t,e.left,r),this.preorder(t,e.right,r),r}height(t=this.root){if(null===t)return-1;let e=this.height(t.left),r=this.height(t.right);return Math.max(e,r)+1}depth(t,e=this.root,r=0){if(!t)return null;if(null===e)return 0;if(e.value===t.value)return r;let i=this.depth(t,e.left,r+1);return 0!==i?i:this.depth(t,e.right,r+1)}isBalanced(t=this.root){return null===t||Math.abs(this.height(t.left)-this.height(t.right))<=1&&this.isBalanced(t.left)&&this.isBalanced(t.right)}rebalance(){if(null===this.root)return;const t=[...new Set(this.inorder().sort(((t,e)=>t-e)))];this.root=this.buildTree(t)}prettyPrint=(t=this.root,e="",r=!0)=>{null!==t&&(null!==t.right&&this.prettyPrint(t.right,`${e}${r?"│   ":"    "}`,!1),console.log(`${e}${r?"└── ":"┌── "}${t.value}`),null!==t.left&&this.prettyPrint(t.left,`${e}${r?"    ":"│   "}`,!0))}}([4,2,3,1]);console.log(e),e.insert(5),e.insert(24),e.insert(400),e.insert(20),e.insert(23),e.prettyPrint(),e.levelOrder(),console.log(e.preorder()),console.log(e.isBalanced()),console.log(e.height(e.find(3))),console.log(e.isBalanced())})()})();